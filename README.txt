--------------
What's inside?
--------------

Rocker is a robustness checker tool that implements the technique developed in
the paper:
	Robustness Against Release/Acquire Semantics
    Authors: Ori Lahav and Roy Margalit (Tel Aviv University)

Rocker has the following running modes:

A) none: No robustness instrumentation. This is used for verifying all traces
	(under SC semantics) of the program without any instrumentation.
B) value: This mode tracks all values for all variables 
	(following ยง5 in the paper).
C) trackSome: This mode implements the optimization described in ยง5.1, tracking
	only selected values of shared variables. This reduces the overhead induced
	by the instrumentation.

---------------
Getting Started
---------------

A detailed README is available in markdown format in (README.md).
Henceforth, this README assumes that the archive was extracted to the folder $PWD.

First install the following software: dmd, dub, spin & gcc.
We tested Rocker with the following versions:
* dmd		2.084.0
* dub		1.13.0
* spin		6.4.8
* gcc		8.2.1


In order to build Rocker, execute the following command in $PWD:
dub build --build=release

Once Rocker is built, you may run the litmus tests to make sure everything 
works correctly by executing the following command in $PWD:
./spinify.d examples/litmus/*.tpl --memory ra -m trackSome 

The expected output is available in a later segment of this README.

-------------------------
Step-by-Step Instructions
-------------------------

Rocker's output is a TSV file containing the following columns:
Program 	- Path to the program.
TPL			- Time spent by Rocker transforming TPL to instrumented Promela.
Spin		- Time spent by Spin creating the C Verifier from Promela.
Compile		- Compilation time of the verifier.
Pan			- Time spent running the verifier.
Res			- Robustness of the program in current mode.
Expected	- Expected robustness for the program under RA.
#T			- Number of threads in the input program.
#LoC		- Lines of code in the input program.

The benchmarks table in ยง6 of the paper has the following columns:
Program		- The name of the program without extension
Res			- A mark showing if the program is robust under RA.
				This is equivalent to the Res column in Rocker's output.
#T			- Number of threads in the program.  It is shown as the #T column
				in Rocker's output.
LoC			- Lines of code in the input program. It is shown as #LoC in Rocker's
				output.
Time		- The duration of compilation and running of the verifier created 
				by Spin. This is the sum of the Compile and Pan columns in
				Rocker's output. The number in the parenthesis is the percentage
				of this time used for compiling, i.e., 
				(compile / (compile + pan)) * 100.
				The time spent by Rocker to create an instrumented Promela
				program and by Spin to create the C verifier is negligible and 
				thus ignored.
SC			- Time spent to compile and verify under SC. This is calculated
				in the same way as Time except Rocker preformed no
				instrumentation on the program (mode "None" mentioned above).

Trencher Columns (the tool we are comparing against)
Res			- Trencher's result: is the program robust under TSO?
Time		- Total amount of time as reported by Trencher.


The examples in the benchmarks table are available in examples/submission.
The Trencher version of these programs is in examples/submission/trencher.
Reference output is available farther ahead in this README.


Reproducing the benchmarks requires running Rocker against RA with the
trackSome mode, Rocker against SC with the none mode, and Trencher against TSO.
For SC only the time spent compiling and verifying is used. For Trencher, only
robustness and total time are used.


Running Rocker against RA with trackSome requires running the following command
in $PWD.
./spinify.d examples/submission/*.tpl --memory ra -m trackSome

Running Rocker against SC with none requires running the following command
in $PWD.
./spinify.d examples/submission/*.tpl --memory sc -m none

The output format was explained earlier and is explained in a more complete
manner in (README.md). You may compare your results from running the tool to
the output provided later in this README.


Reproducing Trencher's result requires a bit more work. You'll need to download
Trencher, modify its source as explained and building it.

Trencher's source code is available in 
https://github.com/yegord/trencher/tree/reachabilityWithSpin

By default Trencher compiles the verifier generated by Spin (Pan) with -O0.
While this reduces the compilation time for short programs, it greatly
increases the verifying time of longer programs. Therefore, we have modified
Trencher (in src/trench/SpinModelChecker.cpp) to compile with -O2 (like Rocker
does).  

Another change we've made to Trencher is increasing the max depth size for the
verifier.  Otherwise Spin fails to verify correctly long programs and reports
robustness even if it is not the case (Trencher seem to discard the warning).

Thus the following two lines:
setCompilerCommandLine("cc -DSAFETY -DVECTORSZ=4444 -DBITSTATE -o \"%2%\" \"%3%\" 2> \"%3%.cc.stderr\"");
setVerifierCommandLine("cd \"%1%\" && \"%2%\" > \"%2%.stdout\" 2> \"%2%.stderr\"");

Are changed to:
setCompilerCommandLine("cc -O2 -DSAFETY -DVECTORSZ=4444 -DBITSTATE -o \"%2%\" \"%3%\" 2> \"%3%.cc.stderr\"");
setVerifierCommandLine("cd \"%1%\" && \"%2%\" -m100000000 > \"%2%.stdout\" 2> \"%2%.stderr\"");

Full documentation is available in Trencher's doc folder. This includes details
about building, running and input syntax.
Building requirements are: C++11 compiler, CMake & Boost.
Compiling is done by executing `make` in Trencher's folder.

We have run Trencher with the following command:
./build/trencher/trencher -b -r $PWD/examples/submission/trencher/*.txt
-b instructs Trencher to benchmark thus showing times. 
-r instructs Trencher to only check for robustness without computing fence
		placements (as Rocker does not have this feature).


You may write your own programs and check for their robustness against RA.
Please consult README.md and the docs/ folder. An explanation of the input
syntax is available there.



---------------
Expected Output
---------------

Please note;
* Rocker's output is TSV (Tab Separated Values). Extra tabs were
	added to this README in order to make the output easier to read.
* Time may vary based on the machine and compiler.

Litmus
------
Program                              	 TPL 	 Spin 	 Compile 	 Pan 	 Res 	 Expected 	 #T 	 #LoC
examples/litmus/2p2w.tpl             	 0.0 	 0.0  	 1.7     	 0.0 	 no  	 no       	 2  	 10
examples/litmus/2p2wp2r.tpl          	 0.0 	 0.0  	 2.0     	 0.0 	 no  	 no       	 2  	 14
examples/litmus/assert.tpl           	 0.0 	 0.0  	 1.4     	 0.0 	 yes 	 yes      	 1  	 6
examples/litmus/assert2.tpl          	 0.0 	 0.0  	 1.2     	 0.0 	 yes 	 yes      	 1  	 6
examples/litmus/assume.tpl           	 0.0 	 0.0  	 1.6     	 0.0 	 yes 	 yes      	 2  	 19
examples/litmus/bar-loop.tpl         	 0.0 	 0.0  	 1.5     	 0.0 	 no  	 no       	 2  	 15
examples/litmus/bcas-test.tpl        	 0.0 	 0.0  	 1.2     	 0.0 	 yes 	 yes      	 1  	 7
examples/litmus/bcas.tpl             	 0.0 	 0.0  	 2.0     	 0.0 	 yes 	 yes      	 2  	 14
examples/litmus/bcas_goto.tpl        	 0.0 	 0.0  	 1.9     	 0.0 	 no  	 no       	 2  	 17
examples/litmus/cas.tpl              	 0.0 	 0.0  	 1.9     	 0.0 	 yes 	 yes      	 2  	 13
examples/litmus/corr2.tpl            	 0.0 	 0.0  	 1.5     	 0.0 	 yes 	 yes      	 4  	 18
examples/litmus/fadd-test.tpl        	 0.0 	 0.0  	 4.6     	 0.0 	 no  	 no       	 5  	 32
examples/litmus/fttest.tpl           	 0.0 	 0.0  	 1.5     	 0.0 	 yes 	 yes      	 2  	 14
examples/litmus/if.tpl               	 0.0 	 0.0  	 1.1     	 0.0 	 yes 	 yes      	 1  	 19
examples/litmus/iriw.tpl             	 0.0 	 0.0  	 1.8     	 0.0 	 no  	 no       	 4  	 18
examples/litmus/iriw_1f.tpl          	 0.0 	 0.0  	 2.0     	 0.0 	 no  	 no       	 4  	 19
examples/litmus/iriw_2f.tpl          	 0.0 	 0.0  	 2.3     	 0.0 	 yes 	 yes      	 4  	 20
examples/litmus/lock.tpl             	 0.0 	 0.0  	 1.6     	 0.0 	 yes 	 yes      	 2  	 16
examples/litmus/lock_order.tpl       	 0.0 	 0.0  	 2.1     	 0.0 	 yes 	 yes      	 2  	 14
examples/litmus/lock_test.tpl        	 0.0 	 0.0  	 2.3     	 0.0 	 yes 	 yes      	 2  	 16
examples/litmus/mcs-lock.tpl         	 0.0 	 0.1  	 18.4    	 0.0 	 yes 	 yes      	 2  	 68
examples/litmus/mfa.tpl              	 0.0 	 0.0  	 1.9     	 0.0 	 no  	 no       	 3  	 19
examples/litmus/mp.tpl               	 0.0 	 0.0  	 1.5     	 0.0 	 yes 	 yes      	 2  	 11
examples/litmus/mp_cas.tpl           	 0.0 	 0.0  	 1.6     	 0.0 	 yes 	 yes      	 2  	 12
examples/litmus/mp_na.tpl            	 0.0 	 0.0  	 1.3     	 0.0 	 yes 	 yes      	 2  	 15
examples/litmus/mp_na2.tpl           	 0.0 	 0.0  	 1.2     	 0.0 	 no  	 no       	 2  	 12
examples/litmus/mp_write.tpl         	 0.0 	 0.0  	 1.5     	 0.0 	 no  	 no       	 2  	 12
examples/litmus/na-rr1.tpl           	 0.0 	 0.0  	 1.4     	 0.0 	 yes 	 yes      	 2  	 14
examples/litmus/na-rr2.tpl           	 0.0 	 0.0  	 1.1     	 0.0 	 yes 	 yes      	 2  	 10
examples/litmus/na-wr1.tpl           	 0.0 	 0.0  	 1.4     	 0.0 	 yes 	 yes      	 2  	 14
examples/litmus/na-wr2.tpl           	 0.0 	 0.0  	 1.1     	 0.0 	 no  	 no       	 2  	 10
examples/litmus/na-ww1.tpl           	 0.0 	 0.0  	 1.4     	 0.0 	 yes 	 yes      	 2  	 14
examples/litmus/na-ww2.tpl           	 0.0 	 0.0  	 1.1     	 0.0 	 no  	 no       	 2  	 10
examples/litmus/nondeterministic.tpl 	 0.0 	 0.0  	 1.3     	 0.0 	 yes 	 yes      	 1  	 12
examples/litmus/rmw-basic.tpl        	 0.0 	 0.0  	 1.4     	 0.0 	 yes 	 yes      	 2  	 10
examples/litmus/sb.tpl               	 0.0 	 0.0  	 1.5     	 0.0 	 no  	 no       	 2  	 12
examples/litmus/sb_3rmw.tpl          	 0.0 	 0.0  	 1.7     	 0.0 	 no  	 no       	 2  	 12
examples/litmus/sb_3rmw_2.tpl        	 0.0 	 0.0  	 1.7     	 0.0 	 yes 	 yes      	 2  	 12
examples/litmus/sb_3rmw_3.tpl        	 0.0 	 0.0  	 1.8     	 0.0 	 yes 	 yes      	 2  	 12
examples/litmus/sb_4rmw.tpl          	 0.0 	 0.0  	 1.9     	 0.0 	 yes 	 yes      	 2  	 12
examples/litmus/sb_rmw.tpl           	 0.0 	 0.0  	 2.6     	 0.0 	 yes 	 yes      	 2  	 15
examples/litmus/sb_rmw_2.tpl         	 0.0 	 0.0  	 2.1     	 0.0 	 yes 	 yes      	 2  	 14
examples/litmus/sb_t.tpl             	 0.0 	 0.0  	 1.5     	 0.0 	 no  	 no       	 2  	 12
examples/litmus/sb_wait.tpl          	 0.0 	 0.0  	 1.6     	 0.0 	 no  	 no       	 2  	 12
examples/litmus/trf.tpl              	 0.0 	 0.0  	 1.4     	 0.0 	 yes 	 yes      	 2  	 10
examples/litmus/wait.tpl             	 0.0 	 0.0  	 1.6     	 0.0 	 yes 	 yes      	 2  	 13
examples/litmus/wait2.tpl            	 0.0 	 0.0  	 1.7     	 0.0 	 no  	 no       	 2  	 14
examples/litmus/wait3.tpl            	 0.0 	 0.0  	 1.9     	 0.0 	 yes 	 yes      	 2  	 15
examples/litmus/wait4.tpl            	 0.0 	 0.0  	 1.4     	 0.0 	 yes 	 yes      	 2  	 13
 	 
Submission items (RA)
---------------------
Program                                     	 TPL 	 Spin 	 Compile 	 Pan   	 Res 	 Expected 	 #T 	 #LoC
examples/submission/barrier.tpl             	 0.0 	 0.0  	 1.7     	 0.0   	 yes 	 yes      	 2  	 11
examples/submission/chase-lev-ra.tpl        	 0.0 	 0.0  	 5.5     	 68.7  	 yes 	 yes      	 3  	 61
examples/submission/chase-lev-sc.tpl        	 0.0 	 0.0  	 3.5     	 0.0   	 no  	 no       	 3  	 55
examples/submission/chase-lev-tso.tpl       	 0.0 	 0.0  	 4.3     	 0.0   	 no  	 no       	 3  	 57
examples/submission/cilk-the-wsq-sc.tpl     	 0.0 	 0.0  	 5.3     	 0.0   	 no  	 no       	 2  	 57
examples/submission/cilk-the-wsq-tso.tpl    	 0.0 	 0.0  	 6.3     	 0.0   	 yes 	 yes      	 2  	 59
examples/submission/dekker-sc.tpl           	 0.0 	 0.0  	 4.5     	 0.0   	 no  	 no       	 2  	 43
examples/submission/dekker-tso.tpl          	 0.0 	 0.0  	 5.9     	 0.0   	 yes 	 yes      	 2  	 49
examples/submission/lamport2-3-ra.tpl       	 0.0 	 0.2  	 49.9    	 180.1 	 yes 	 yes      	 3  	 123
examples/submission/lamport2-ra.tpl         	 0.0 	 0.1  	 19.8    	 0.2   	 yes 	 yes      	 2  	 79
examples/submission/lamport2-sc.tpl         	 0.0 	 0.0  	 9.6     	 0.0   	 no  	 no       	 2  	 65
examples/submission/lamport2-tso.tpl        	 0.0 	 0.0  	 13.9    	 0.0   	 no  	 no       	 2  	 69
examples/submission/nbw-w-lr-rl.tpl         	 0.0 	 0.0  	 6.8     	 0.0   	 yes 	 yes      	 4  	 50
examples/submission/peterson-ra-bratosz.tpl 	 0.0 	 0.0  	 3.3     	 0.0   	 no  	 no       	 2  	 28
examples/submission/peterson-ra-dmitriy.tpl 	 0.0 	 0.0  	 4.3     	 0.0   	 yes 	 yes      	 2  	 36
examples/submission/peterson-ra.tpl         	 0.0 	 0.0  	 6.6     	 0.0   	 yes 	 yes      	 2  	 44
examples/submission/peterson-sc.tpl         	 0.0 	 0.0  	 3.3     	 0.0   	 no  	 no       	 2  	 28
examples/submission/peterson-tso.tpl        	 0.0 	 0.0  	 4.1     	 0.0   	 no  	 no       	 2  	 30
examples/submission/rcu-offline.tpl         	 0.1 	 0.2  	 64.0    	 76.0  	 yes 	 yes      	 3  	 215
examples/submission/rcu.tpl                 	 0.0 	 0.0  	 7.2     	 62.0  	 yes 	 yes      	 4  	 75
examples/submission/seqlock.tpl             	 0.0 	 0.0  	 3.4     	 18.6  	 yes 	 yes      	 4  	 49
examples/submission/spinlock.tpl            	 0.0 	 0.0  	 1.7     	 0.0   	 yes 	 yes      	 2  	 31
examples/submission/spinlock4.tpl           	 0.0 	 0.0  	 4.8     	 2.0   	 yes 	 yes      	 4  	 66
examples/submission/ticketlock.tpl          	 0.0 	 0.0  	 4.2     	 0.0   	 yes 	 yes      	 2  	 26
examples/submission/ticketlock4.tpl         	 0.0 	 0.0  	 6.1     	 17.7  	 yes 	 yes      	 4  	 50

Submission items (SC)
---------------------
Program                                     	 TPL 	 Spin 	 Compile 	 Pan  	 Res 	 Expected 	 #T 	 #LoC
examples/submission/barrier.tpl             	 0.0 	 0.0  	 1.2     	 0.0  	 yes 	 yes      	 2  	 11
examples/submission/chase-lev-ra.tpl        	 0.0 	 0.0  	 1.5     	 40.4 	 yes 	 yes      	 3  	 61
examples/submission/chase-lev-sc.tpl        	 0.0 	 0.0  	 1.3     	 30.6 	 yes 	 no       	 3  	 55
examples/submission/chase-lev-tso.tpl       	 0.0 	 0.0  	 1.3     	 32.9 	 yes 	 no       	 3  	 57
examples/submission/cilk-the-wsq-sc.tpl     	 0.0 	 0.0  	 1.3     	 0.0  	 yes 	 no       	 2  	 57
examples/submission/cilk-the-wsq-tso.tpl    	 0.0 	 0.0  	 1.3     	 0.0  	 yes 	 yes      	 2  	 59
examples/submission/dekker-sc.tpl           	 0.0 	 0.0  	 1.5     	 0.0  	 yes 	 no       	 2  	 43
examples/submission/dekker-tso.tpl          	 0.0 	 0.0  	 1.3     	 0.0  	 yes 	 yes      	 2  	 49
examples/submission/lamport2-3-ra.tpl       	 0.0 	 0.0  	 2.0     	 5.1  	 yes 	 yes      	 3  	 123
examples/submission/lamport2-ra.tpl         	 0.0 	 0.0  	 1.5     	 0.0  	 yes 	 yes      	 2  	 79
examples/submission/lamport2-sc.tpl         	 0.0 	 0.0  	 1.3     	 0.0  	 yes 	 no       	 2  	 65
examples/submission/lamport2-tso.tpl        	 0.0 	 0.0  	 1.6     	 0.0  	 yes 	 no       	 2  	 69
examples/submission/nbw-w-lr-rl.tpl         	 0.0 	 0.0  	 1.3     	 0.0  	 yes 	 yes      	 4  	 50
examples/submission/peterson-ra-bratosz.tpl 	 0.0 	 0.0  	 1.2     	 0.0  	 yes 	 no       	 2  	 28
examples/submission/peterson-ra-dmitriy.tpl 	 0.0 	 0.0  	 1.2     	 0.0  	 yes 	 yes      	 2  	 36
examples/submission/peterson-ra.tpl         	 0.0 	 0.0  	 1.4     	 0.0  	 yes 	 yes      	 2  	 44
examples/submission/peterson-sc.tpl         	 0.0 	 0.0  	 1.5     	 0.0  	 yes 	 no       	 2  	 28
examples/submission/peterson-tso.tpl        	 0.0 	 0.0  	 1.2     	 0.0  	 yes 	 no       	 2  	 30
examples/submission/rcu-offline.tpl         	 0.0 	 0.0  	 2.1     	 19.0 	 yes 	 yes      	 3  	 215
examples/submission/rcu.tpl                 	 0.0 	 0.0  	 1.4     	 0.9  	 yes 	 yes      	 4  	 75
examples/submission/seqlock.tpl             	 0.0 	 0.0  	 1.4     	 2.2  	 yes 	 yes      	 4  	 49
examples/submission/spinlock.tpl            	 0.0 	 0.0  	 1.2     	 0.0  	 yes 	 yes      	 2  	 31
examples/submission/spinlock4.tpl           	 0.0 	 0.0  	 1.3     	 0.3  	 yes 	 yes      	 4  	 66
examples/submission/ticketlock.tpl          	 0.0 	 0.0  	 1.2     	 0.0  	 yes 	 yes      	 2  	 26
examples/submission/ticketlock4.tpl         	 0.0 	 0.0  	 1.3     	 6.7  	 yes 	 yes      	 4  	 50

Trencher's Output
-----------------
The output format is a line of "header value" pairs. The items of interest are 
"feasibleAttacks" (Indicating robustness of the program. If the value is 0 the
program is robust against TSO) and "realTime" showing the time spent checking
the program.

filename $PWD/examples/submission/trencher/barrier.txt threads 2 states 8 transitions 6 potentialAttacksCount 1 feasibleAttacks 1 spinTime 42 compilerTime 1998 verifierTime 3026 trailTime 22 cpuTime 2 realTime 5092
filename $PWD/examples/submission/trencher/chase-lev-wsq-ra.txt threads 3 states 47 transitions 54 potentialAttacksCount 1 feasibleAttacks 0 spinTime 47 compilerTime 6586 verifierTime 112175 trailTime 0 cpuTime 2 realTime 118811
filename $PWD/examples/submission/trencher/chase-lev-wsq-sc.txt threads 3 states 47 transitions 54 potentialAttacksCount 1 feasibleAttacks 1 spinTime 36 compilerTime 4986 verifierTime 12539 trailTime 73 cpuTime 2 realTime 17637
filename $PWD/examples/submission/trencher/chase-lev-wsq-tso.txt threads 3 states 47 transitions 54 potentialAttacksCount 1 feasibleAttacks 0 spinTime 32 compilerTime 4201 verifierTime 138831 trailTime 0 cpuTime 2 realTime 143067
filename $PWD/examples/submission/trencher/cilk-the-wsq-sc.txt threads 2 states 54 transitions 58 potentialAttacksCount 1 feasibleAttacks 1 spinTime 48 compilerTime 6045 verifierTime 2923 trailTime 29 cpuTime 3 realTime 9049
filename $PWD/examples/submission/trencher/cilk-the-wsq-tso.txt threads 2 states 54 transitions 58 potentialAttacksCount 1 feasibleAttacks 0 spinTime 49 compilerTime 6054 verifierTime 5831 trailTime 0 cpuTime 2 realTime 11938
filename $PWD/examples/submission/trencher/dekker-sc.txt threads 2 states 24 transitions 30 potentialAttacksCount 1 feasibleAttacks 1 spinTime 25 compilerTime 3225 verifierTime 2781 trailTime 17 cpuTime 2 realTime 6051
filename $PWD/examples/submission/trencher/dekker-tso.txt threads 2 states 28 transitions 34 potentialAttacksCount 1 feasibleAttacks 0 spinTime 23 compilerTime 3240 verifierTime 2786 trailTime 0 cpuTime 1 realTime 6051
filename $PWD/examples/submission/trencher/lamport2-3-ra.txt threads 3 states 83 transitions 92 potentialAttacksCount 1 feasibleAttacks 1 spinTime 64 compilerTime 8597 verifierTime 2775 trailTime 39 cpuTime 4 realTime 11479
filename $PWD/examples/submission/trencher/lamport2-ra.txt threads 2 states 48 transitions 54 potentialAttacksCount 1 feasibleAttacks 0 spinTime 39 compilerTime 5108 verifierTime 3013 trailTime 0 cpuTime 2 realTime 8163
filename $PWD/examples/submission/trencher/lamport2-sc.txt threads 2 states 40 transitions 46 potentialAttacksCount 1 feasibleAttacks 1 spinTime 39 compilerTime 5475 verifierTime 3084 trailTime 47 cpuTime 2 realTime 8648
filename $PWD/examples/submission/trencher/lamport2-tso.txt threads 2 states 44 transitions 50 potentialAttacksCount 1 feasibleAttacks 0 spinTime 66 compilerTime 5175 verifierTime 2791 trailTime 0 cpuTime 3 realTime 8035
filename $PWD/examples/submission/trencher/nbw-w-lr-rl.txt threads 4 states 44 transitions 42 potentialAttacksCount 1 feasibleAttacks 0 spinTime 28 compilerTime 4735 verifierTime 2729 trailTime 0 cpuTime 2 realTime 7495
filename $PWD/examples/submission/trencher/peterson-ra-bratosz.txt threads 2 states 20 transitions 22 potentialAttacksCount 1 feasibleAttacks 1 spinTime 18 compilerTime 2753 verifierTime 3083 trailTime 15 cpuTime 1 realTime 5870
filename $PWD/examples/submission/trencher/peterson-ra-dmitriy.txt threads 2 states 18 transitions 22 potentialAttacksCount 1 feasibleAttacks 0 spinTime 18 compilerTime 2908 verifierTime 2810 trailTime 0 cpuTime 2 realTime 5739
filename $PWD/examples/submission/trencher/peterson-ra.txt threads 2 states 18 transitions 22 potentialAttacksCount 1 feasibleAttacks 0 spinTime 21 compilerTime 2616 verifierTime 2822 trailTime 0 cpuTime 1 realTime 5460
filename $PWD/examples/submission/trencher/peterson-sc.txt threads 2 states 14 transitions 18 potentialAttacksCount 1 feasibleAttacks 1 spinTime 23 compilerTime 2403 verifierTime 2867 trailTime 14 cpuTime 1 realTime 5309
filename $PWD/examples/submission/trencher/peterson-tso.txt threads 2 states 16 transitions 20 potentialAttacksCount 1 feasibleAttacks 0 spinTime 18 compilerTime 2644 verifierTime 2956 trailTime 0 cpuTime 1 realTime 5621
filename $PWD/examples/submission/trencher/rcu-offline.txt threads 4 states 219 transitions 266 potentialAttacksCount 1 feasibleAttacks 1 spinTime 249 compilerTime 33908 verifierTime 2897 trailTime 168 cpuTime 9 realTime 37233
filename $PWD/examples/submission/trencher/seqlock.txt threads 4 states 34 transitions 40 potentialAttacksCount 1 feasibleAttacks 0 spinTime 26 compilerTime 4533 verifierTime 4548 trailTime 0 cpuTime 2 realTime 9109
filename $PWD/examples/submission/trencher/spinlock.txt threads 2 states 18 transitions 20 potentialAttacksCount 1 feasibleAttacks 0 spinTime 37 compilerTime 2828 verifierTime 2834 trailTime 0 cpuTime 3 realTime 5703
filename $PWD/examples/submission/trencher/spinlock4.txt threads 4 states 36 transitions 40 potentialAttacksCount 1 feasibleAttacks 0 spinTime 26 compilerTime 4019 verifierTime 3010 trailTime 0 cpuTime 2 realTime 7057
filename $PWD/examples/submission/trencher/ticketlock.txt threads 2 states 24 transitions 24 potentialAttacksCount 1 feasibleAttacks 0 spinTime 20 compilerTime 2336 verifierTime 2775 trailTime 0 cpuTime 1 realTime 5133
filename $PWD/examples/submission/trencher/ticketlock4.txt threads 4 states 48 transitions 48 potentialAttacksCount 1 feasibleAttacks 0 spinTime 27 compilerTime 4240 verifierTime 19150 trailTime 0 cpuTime 2 realTime 23420
